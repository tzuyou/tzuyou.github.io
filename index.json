[{"categories":["程式設計"],"contents":"目錄 APCS 2017-0304-2小群體 題目來源：c291. APCS 2017-0304-2小群體\n題目敘述：一群人在一起時經常會形成一個一個的小群體。假設有 N個人，編號由 0到 N-1，每個人都寫下他最好朋友的編號（最好朋友有可能是他自己的編號，如果他自己沒有其他好友）， 在本題中，每個人的好友編號絕對不會重複，也就是說0到 N-1每個數字 都恰好出現一次。 輸入說明： 輸出說明： 第一行是一個正整數N，說明團體中人數。 第二行依序是 0的好友編號 、1的好友編號 、…… 、N-1的好友編號。共有N個數字，包含 0到 N-1的每個數字恰好出現一次，數字間會有一個空白隔開。 請輸出小群體的個數。 解題概念：可以從第編號0人開始追蹤他的好友一直追蹤下去直到迴圈結束，則為一個小群體。過程中可以分為兩個方法 1.使用迴圈 2.使用遞迴(DFS)。 兩者速度差不多，使用DFS可以幫助練習遞迴觀念。 方法1 (迴圈) : 1. 先開兩個陣列，friend[n] 用來存放每個編號的朋友，record[n] 則記錄哪些人已經被遍歷過。 2. 接著先把編號0~N-1的朋友讀入陣列 friend[n] 。 3. 最後我們要開始遍歷所有人，若這個人已被記錄過就continue，否則就把當前編號紀錄為k，然後小群體+1，並把當前的人記錄到record[n]裡面。然後使用無窮迴圈，將當前編號k的朋友陣列設成p變數 (int p = friends[k];)，並把p記錄在record裡。最重要的一步，我們要把k編號更新成原本k的朋友，而當新的k=i時則結束迴圈。如此即可得出答案。 4. 程式碼如下： #include\u0026lt;stdio.h\u0026gt;\r#define n 50020\rint main(void)\r{\rint N,i,k=0,ans=0;\rint friends[n]={0};\rint record[n]={0};\rscanf(\u0026#34;%d\u0026#34;,\u0026amp;N);\rfor(i=0;i\u0026lt;N;i++)\r{\rscanf(\u0026#34;%d\u0026#34;,\u0026amp;friends[i]);\r}\rfor(i=0;i\u0026lt;N;i++)\r{\rif(record[i]==-1)\rcontinue;\relse\r{\rk=i;\rans++;\rrecord[i]=-1;\rwhile(1)\r{\rint p = friends[k];\rrecord[p]=-1;\rk = friends[k];\rif(k==i)\rbreak;\r}\r}\r}\rprintf(\u0026#34;%d\u0026#34;,ans);\r} 方法2 (遞迴) : 1. 步驟大致一樣，開兩陣列，然後再讀入。 2. 開一迴圈如果當前被讀過就continue(以便不會一直dfs，節省時間)，否則群體+1，然後開始遞迴。 3. 我們將編號 i (0~N-1) 輸進去遞迴裡，而每次遞迴的變數則是 now，也就是當前的編號。這邊可以設f=friend[now]; 增加可讀性，當 f=now (now跟now的朋友一樣) 就 return (結束遞迴)、如果當前編號被掃過也要 return，接者就可以開始記錄哪些已經遍歷，然後在函式內呼叫 dfs(f) 被傳入的值f為先前now的朋友，而重新一輪時的now就會更新成之前now的朋友 (有點饒口XD)。 4. 程式碼如下： #include\u0026lt;stdio.h\u0026gt;\rint N;\rint friends[50005];\rint ans=0;\rint record[50005];\rvoid dfs(int now)\r{\rint f=friends[now];\rif(now==f) {\rreturn;\r}\rif(record[now]==-1) return;\rrecord[now]=-1;\rdfs(f);\r}\rint main(void)\r{\rscanf(\u0026#34;%d\u0026#34;,\u0026amp;N);\rint i;\rfor(i=0;i\u0026lt;N;i++)\r{\rscanf(\u0026#34;%d\u0026#34;,\u0026amp;friends[i]);\r}\rfor(i=0;i\u0026lt;N;i++)\r{\rif(record[i]==-1) {\rcontinue;\r}\relse\r{\rans++;\rdfs(i);\r}\r}\rprintf(\u0026#34;%d\u0026#34;,ans);\r} 總結來說：遞迴較為直觀，寫起來較為簡潔(當題目要求更多時)，但此題為實作第二，因此兩種皆可以用。\n","permalink":"https://tzuyou.github.io/blog/post-5/","tags":null,"title":"APCS題解"},{"categories":["程式設計"],"contents":"零、補充 一、基本運算子 邏輯 運算子 意義 \u0026amp;\u0026amp; AND,且 || OR,或 ! NOT,否 二、其他常用的運算子 增遞/減遞運算 運算子 意義 ++ 變數值加 1 - - 變數值減 1 i++：先執行整個敘述後, 再將 i 的值加 1 ++i：先將 i 的值加 1, 再執行整個敘述 2. 運算子(?:) 意義 條件判斷 ? 運算式 1 : 運算式 2 if(判斷條件)\r運算式 1;\relse\r運算式 2; 實例1 實例2 a = (x \u0026gt; 100) ? b : c; abs = (a \u0026gt; 0) ? a : -a; if (a \u0026gt; 0)\rabs = a;\relse\rabs = -a; 壹、格式化的輸入與輸出 #include \u0026lt;stdio.h\u0026gt;#將檔案\u0026lt;stdio.h\u0026gt;將進來\rint main(){\rprintf(\u0026#34;Hello world!\u0026#34;);\rreturn 0;\r} https://web.fg.tp.edu.tw/~earth/vision/study/cprogram06/C_handout.pdf\n一、標準輸出指令 printf(\u0026quot;格式字串\u0026quot;, N1, N2,...);\nscanf(\u0026quot;格式字串\u0026quot;,\u0026amp;N1,\u0026amp;N2,...);\nPrintf int main(){\rint a = 1 ;\rprintf(\u0026#34;Hello \\n%d\u0026#34;, a);\rreturn 0; } Scanf int main(){\rint a,b;\rscanf(\u0026#34;%d%d\u0026#34;,\u0026amp;a,\u0026amp;b);\rprintf(\u0026#34;%d,%d\u0026#34;,a,b);\r} 注意!如果要讀取字元陣列時，str它被當作指向字串的指標使用，所以在 scanf 函式中，我們直接使用陣列名稱 str 來讀取字串。因為 str 已經是一個指向陣列的指標，使用 \u0026amp; 運算子會導致類型不匹配 當使用 scanf 函式讀取字串時，應該直接使用陣列名稱（字串的指標），而不是使用 \u0026amp; 運算子來取得字串的地址。這是因為 C 語言中的陣列名稱本身就是指向陣列首元素的指標，所以在 scanf 函式中使用陣列名稱，它會自動地被解釋為指向陣列的指標，而不需要使用額外的 \u0026amp; 運算子。by_chatgtp\n二、跳脫字元(Escape Sequence) \\n 換行 \\\u0026quot; 雙引號 \\\u0026rsquo; 單引號 \\f 換頁 \\t 跳格 \\b 倒退 \\x ASCII 碼 (16 進位) \\d ASCII 碼 (8 進位) \\\\ 反斜線 \\/ 斜線 例子 執行結果\nprintf(\u0026#34;\\tThis line begins with tab.\\n\u0026#34;);\rprintf(\u0026#34;It\\\u0026#39;s a \\\u0026#34;C Tutorial\\\u0026#34;.\\n\u0026#34;);\rprintf(\u0026#34;This is backslash: \\\\.\\n\u0026#34;);\rprintf(\u0026#34;\\\\101 is \\101.\\n\u0026#34;);\rprintf(\u0026#34;\\\\x41 is \\x41.\\n\u0026#34;); This line begins with tab. It\u0026rsquo;s a \u0026ldquo;C Tutorial\u0026rdquo;. This is backslash: . \\101 is A. \\x41 is A.\n三、修飾子 -：向左靠齊 +：印出正負號 %c：字元 %s：字串 %d：十進位整數 %f：浮點數 (小數點型式) %l：長整數，加在 d、u…之前 %u：無號十進位整數 %e：浮點數 (指數 e 型式) Nope 貳、流程控制 一、if 指令 巨集 define name 函式\n#define MAX(a, b) (a\u0026gt;b ? a:b)\rint main(){\rint x, y;\rprintf(\u0026#34;輸入N1:\u0026#34;);\rscanf(\u0026#34;%d\u0026#34;,\u0026amp;x);\rprintf(\u0026#34;輸入N2:\u0026#34;);\rscanf(\u0026#34;%d\u0026#34;,\u0026amp;y);\rprintf(\u0026#34;兩數最大值為:%d\\n\u0026#34;,MAX(x, y));\r} if (條件判斷式)\r{\r指令1;\r...2;\r...3;\r.....\r} 單一條件不用加 if (條件判斷)\r指令1 ; ALL int main(){\rint a;\rprintf(\u0026#34;輸入成績:\u0026#34;);\rscanf(\u0026#34;%d\u0026#34;,\u0026amp;a);\rif (a\u0026gt;=60 \u0026amp;\u0026amp; a\u0026lt;=100)\rprintf(\u0026#34;及格\\n\u0026#34;);\relse if (a\u0026gt;100)\rprintf(\u0026#34;error!\\n\u0026#34;);\relse\rprintf(\u0026#34;不及格\\n\u0026#34;);\r} 二、switch指令 case、default 範例題：\n依據下列表格中的等級表，使用switch完成分數的判斷，且在使用者輸入成績後顯示出等級\nColumn 1 Column 2 A 90~100 B 80~90 C 70~79 D 60~69 E 0~59 switch (運算式)\r{\rcase 選擇值 1:\r敘述主體 1;\rbreak;\rcase 選擇值 2:\r敘述主體 2;\rbreak;\r…\rcase 選擇值 n:\r敘述主體 n;\rbreak;\rdefault:\r敘述主體;\r} Answer:\nint main(){\rint a;\rprintf(\u0026#34;輸入成績:\u0026#34;);\rscanf(\u0026#34;%d\u0026#34;,\u0026amp;a);\rswitch ( a/10 ){\rcase 10:\rcase 9:\rprintf(\u0026#34;A\u0026#34;);\rbreak;\rcase 8:\rprintf(\u0026#34;B\u0026#34;);\rbreak;\rcase 7:\rprintf(\u0026#34;C\u0026#34;);\rbreak;\rcase 6:\rprintf(\u0026#34;D\u0026#34;);\rbreak;\rcase 0 ... 5: /* gcc擴充套件允許對比特定範圍 (0~5)*\\\rprintf(\u0026#34;E\u0026#34;);\rbreak;\r}\r} for 迴圈 for(變數起始1;條件;變數增減){\r程式1;\rfor(變數起始2;條件;變數增減){\r程式2;\r}\r} while while(條件判斷){\r程式區;\r} do-while (後測試型迴圈) do裡的程式碼會被先執行一次\ndo{\r:\r程式區;\r}\rwhile(條件判斷); break、continue break跳脫迴圈不再執行下列程式 continue持續執行迴圈並跳過下列程式 參、陣列、字串、矩陣、結構與檔案 一、陣列 一維 元素個數可未設定(自動) 超過個數長度時將自動設定為0 int arr[] = {\r[0] = 3,\r[1] = 4,\r[2] = 5,\r[3] = 6,\r[4] = 7,\r}; 資料型態 陣列名稱 [長度]; 或者\n資料型態 陣列名稱 [大小]={初始值1,..2,..3,...}; 二維 若初始值個數少於設定長度其餘將設定為0 c/c++以列為主軸 x 行[0] 行[1] 行[2] 列[0] [0][0] [0][1] [0][2] 列[1] [1][0] [1][1] [1][2] 資料型態 陣列名稱 [列個數] [行個數]; 資料型態 陣列名稱 [列個數] [行個數] ={{var1,var2,var3},{var4,var5,var6}}; 二、結構 struct struct 結構名稱\r{\r資料型態 成員1;\r資料型態 成員2;\r......\r}s1,s2; 定義結構變數 struct name s1,s2;\n點運算子(用於存取) 結構變數.成員名稱;\n成績\u0026amp;名子 int main(){\rstruct rank\r{\rchar name[10];\rint score;\r} s1,s2 ;\rstrcpy(s1.name,\u0026#34;KATE\u0026#34;);\rs1.score = 900;\rs2 = s1;\rprintf(\u0026#34;%s%d\u0026#34;,s2.name,s2.score);\rreturn 0;\r} 巢狀struct struct 結構名稱1\r{\r資料型態 成員1;\r資料型態 成員2;\r......\r};\rstruct 結構名稱2\r{\r......\rstruct 結構名稱1 變數名稱;\r}; 結構陣列 宣告 struct 結構名稱 陣列名稱 [長度];\n存取 陣列名稱 [索引值].陣列成員名稱\nstruct 結構名稱\r{\r......\r資料型態 陣列名稱 [個數];\r}; struct 結構名稱 陣列名稱 [個數];\n存取 陣列名稱 [索引值].陣列成員名稱[索引值]\n下圖為建立5個元素的結構陣列 struct student\r{\rchar name[10];\rint score;\r};\rstruct student class1[5]; 演算法_ 具有時效性，不會形成無窮迴圈\n分治演算法 將一個大問題拆解成許多的子問題 再由各子問題的解合併出答案\n遞迴演算法 1. 費伯納數列 直接遞迴 在遞迴函數中直接呼叫本身\nint Fun(...)\r{\r...\rif(...)\rFun(...)\r...\r} 間接遞迴 在遞迴函數中呼叫其他遞迴，再從其他遞迴呼叫回遞迴函數。\nint Fun(...) {\r.\rif(...)\rFun2(...)\r...\r}\rint Fun2(...)\r{\r.\rif (...)\rFun(...)\r...\r} For example:\nn! =nX(n-1) * (n-2) .....*1 code\nint factorial(int i)\r{\rint sum;\rif (i==0) /*終結*\\\r{\rreturn(1); }\relse\r{\rsum = i*factorial(i-1); /*sum =n*(n-1)*\\\r}\rreturn sum;\r} For example2:\n第零項為0 第一項為1，每個項目皆由前兩項相加所得的數_費伯納序列(Fibonacci)。\ncode\nint fib(int n)\r{\rif (n==0) return 0;\rif (n==1) return 1;\relse\rreturn fib(n-1)+fib(n-2);/*呼叫兩次*/\r} 2.河內塔問題 結論： 步驟1: 將n-1盤子，從木樁1移到2 步驟2: 移動第n個最大的盤子，從木樁1移到3 步驟3: 將n-1盤子，從木樁2移到3\n限制: 直徑較小套環永遠置於直徑較大的上方 套還可隨意從木樁移到其他木樁 每一次僅能移動一個套環，且為最上面開始移動 code: #include\u0026lt;stdio.h\u0026gt;\rvoid hanoi(int n, int p1, int p2, int p3)\r{\rif (n==1) /*出口*/\rprintf(\u0026#34;第%d個套環從 %d 移到 %d\\n\u0026#34;,n,p1,p3);\relse\r{\rhanoi(n-1,p1,p3,p2);\rprintf(\u0026#34;第%d個套環從 %d 移到 %d\\n\u0026#34;,n,p1,p3);\rhanoi(n-1,p2,p1,p3);\r}\r}\rint main()\r{\rint n = 3; // 套環的數量\rhanoi(n, 1, 2, 3); // 從柱子1移動到柱子3，使用柱子2作為中介\rreturn 0;\r} 3.選擇排序 #include \u0026lt;stdio.h\u0026gt;\r#include \u0026lt;stdlib.h\u0026gt;\r#include \u0026lt;time.h\u0026gt;\r#define N 10\r/* run this program using the console pauser or add your own getch, system(\u0026#34;pause\u0026#34;) or input loop */\rint data[N];\rint main(void) {\rsrand(time(NULL));\rint i,j,k,p,tmp;\rfor(i=0; i\u0026lt;N ; i++){\rdata[i] =rand()%100;\r}\rfor(i=0; i\u0026lt;N ; i++){\rprintf(\u0026#34;%d \u0026#34;,data[i]);\r}\rk=0;\rfor(j=0;j\u0026lt;N-1;j++)\r{\rfor(i=j+1 ; i\u0026lt;N ; i++){\rif(data[i]\u0026lt;data[k])\rk=i;\r}\rtmp=data[j];\rdata[j]=data[k];\rdata[k]=tmp;\r}\rprintf(\u0026#34;\\n\u0026#34;);\rfor(i=0; i\u0026lt;N ; i++){\rprintf(\u0026#34;%d \u0026#34;,data[i]);\r}\r} 4.插入排序 #include \u0026lt;stdio.h\u0026gt;\r#include \u0026lt;stdlib.h\u0026gt;\r#include \u0026lt;time.h\u0026gt;\r#define N 10\rint data[N];\rint main(void) {\rsrand(time(NULL));\rint i,j,k,p,tmp;\rfor(i=0; i\u0026lt;N ; i++){\rdata[i] =rand()%100;\r}\rfor(i=0; i\u0026lt;N ; i++){\rprintf(\u0026#34;%3d \u0026#34;,data[i]);\r}\rprintf(\u0026#34;\\n\u0026#34;);\rfor(j=1;j\u0026lt;N;j++)\r{\rtmp=data[j];\rfor(i=j;i\u0026gt;0;i--){\rif(data[i-1]\u0026gt;data[i]){\rdata[i] =data[i-1];\rdata[i-1]=tmp;\r}\relse\rbreak;\r}\rfor(i=0; i\u0026lt;N ; i++){\rprintf(\u0026#34;%3d \u0026#34;,data[i]);\r}\rprintf(\u0026#34;\\n\u0026#34;);\r} } ","permalink":"https://tzuyou.github.io/blog/post-4/","tags":null,"title":"C程式語言設計筆記"},{"categories":["程式設計"],"contents":" 第一章-HTML HTML基本概念 基本概念\nhr 分頁 br 換行 p 內文 a 標籤 href=\u0026ldquo;連結\u0026rdquo; 雙引號內放入連結 target=\u0026ldquo;black\u0026rdquo; 點擊連結開啟新分頁 連結中的文字或是序列中都可以加上粗體、斜體 序列中也可以安插圖片、連結 常用快捷鍵 Ctrl+/ 快速註解 Ctrl+tab 展開 Alt+右 跳到詞的最尾 Ctrl+D 選取文字， 例如框選h1，h1及/h1裡的h1都會被選取，在更換標題等級時很方便 效果 範例程式碼 \u0026lt;h1\u0026gt;Hell World\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt; 內文 \u0026lt;br\u0026gt; \u0026lt;a href=\u0026#34;https://developer.mozilla.org/zh-TW/docs/Web/HTML\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;Html參考\u0026lt;/a\u0026gt; \u0026lt;/p\u0026gt; HTML基本概念 圖片\u0026amp;清單\n清單分為有序與無序 有序序列-依數字排列下去 無序序列-使用符號排列 也可以在同個序列中同時安插連結及圖片\n有序序列(ol) Ordered List有序清單\nol開始 /ol結束 之後需要清單的開頭與結束，因此寫入li，/li 在此中間及可放入文字\n\u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; 範例效果\n範例程式碼\n\u0026lt;h2\u0026gt;有序清單\u0026lt;/h2\u0026gt; \u0026lt;ol\u0026gt; \u0026lt;li\u0026gt;HTML介紹\u0026lt;/li\u0026gt; \u0026lt;li\u0026gt;CSS介紹\u0026lt;/li\u0026gt; \u0026lt;/ol\u0026gt; 無序序列(ul) Unordered List無序清單\nul開始 /ul結束 之後需要清單的開頭與結束，因此寫入li，/li 在此中間及可放入文字\n\u0026lt;ul\u0026gt; \u0026lt;li\u0026gt;\u0026lt;/li\u0026gt; \u0026lt;/ul\u0026gt; 下圖為在序列中安插圖片與連結\n範例\n範例程式碼\n\u0026lt;h2\u0026gt;無序清單\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; 外果皮 \u0026lt;a href=\u0026#34;https://zh.wikipedia.org/zh-tw/%E6%9E%9C%E5%AE%9E\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;參考\u0026lt;/a\u0026gt; \u0026lt;img src=\u0026#34;https://pic.pimg.tw/salutsalut/1452052299-3537198664.jpg\u0026#34; alt=\u0026#34;\u0026#34; width=200\u0026gt; \u0026lt;/li\u0026gt; 圖片 與上段程式碼一起討論 可在內文或在同一個序列中同時安插圖片及連結\n可以輸入img後Tab展開 img src=\u0026ldquo;放入圖片連結\u0026rdquo; 一般展開後長這樣 \u0026lt;img src=\u0026quot;\u0026quot; alt=\u0026quot;\u0026quot;\u0026gt;\n可在最後加上 width=某數 調整大小，假設調整200 \u0026lt;img src=\u0026quot;\u0026quot; alt=\u0026quot;\u0026quot; width=200\u0026gt;\n範例效果\n範例程式碼\n\u0026lt;h2\u0026gt;無序清單\u0026lt;/h2\u0026gt; \u0026lt;ul\u0026gt; \u0026lt;li\u0026gt; 外果皮 \u0026lt;a href=\u0026#34;https://zh.wikipedia.org/zh-tw/%E6%9E%9C%E5%AE%9E\u0026#34; target=\u0026#34;_blank\u0026#34;\u0026gt;參考\u0026lt;/a\u0026gt; \u0026lt;img src=\u0026#34;https://pic.pimg.tw/salutsalut/1452052299-3537198664.jpg\u0026#34; alt=\u0026#34;\u0026#34; width=200\u0026gt; \u0026lt;/li\u0026gt; ","permalink":"https://tzuyou.github.io/blog/post-3/","tags":null,"title":"HTML簡易教學"},{"categories":["程式設計"],"contents":" Markdown為輕量級標記式語言，編寫的可讀性高，亦讀也亦寫，文章格式大致有下列幾種。\n第一種-標題 共有六種不同大小 標題1 標題2 標題3 標題4 標題5 標題6 第二種-字體 1.粗體 效果長這樣 2.斜體 效果長這樣 3.粗斜體 效果長這樣 4.刪節號 效果長這樣 5.前言 效果就是一個框框圍住，需要前言或是標註資料來源時都可以使用。\n第三種-序列 1.有序序列 可使數字往下自動排列下去，即使開頭都打1.。\n有 序 序 列 2.無序序列 可以使文字往下排列下去，並同時向內縮排，效果如下。\n無 序 序 列 第四種-其他常用功能 1.超連結 可以放置任何的連結，甚至可以放網站內的其他文章，例如常看到的上下篇。\n鏈結可自訂文字 2.shortcodes 假設你想直接分享某些IG、FB、Twitter貼文或者YouTube影片的話，就需要使用到這個功能\n假設我想分享一個關於C#教學影片的話 效果長這樣 3.圖片\u0026amp;表格\u0026amp;圖標 方便你更好呈現文章的內容\n圖片效果如下 表格效果如下 Tables Are Cool col 3 is right-aligned $1600 col 2 is centered $12 zebra stripes are neat $1 個人認為表格不太好用，所以是找範例的，\n左邊有一個手在指的就是圖標，他可以向下縮排(無序序列) 第五種-程式碼區塊 程式碼區塊分了兩種類型 (1) 單行程式碼及 (2) 多行程式碼。 如果你解釋某個程式碼或討論哪個程式碼時就可能需要用到它，因為真的比直接打出來好看多了。\n1.單行程式碼 假設我想只用單一個程式碼下去討論的話，就可以使用這個。 *用Python列印出Hello World舉例 直接打出來的話 print(\u0026ldquo;Hello World\u0026rdquo;) 使用程式碼區塊的話 print(\u0026quot;Hello World\u0026quot;) 2.多行程式碼 同理如果要表示多行的程式碼的話，就可以使用這個。 *這次用Python列印出Hello World以及列印出(a)跟(b)，假設a=1,b=a+1舉例 直接打出來的話 a=1 b=a+1 print(\u0026ldquo;Hello World\u0026rdquo;,a,b) 使用程式碼區塊的話 a=1\rb=a+1\rprint(\u0026#34;Hello World\u0026#34;,a,b) 3.顏色 不是只有單一個顏色，如果在程式碼區塊旁加上其他的程式語言，他就會變成該程式語言的配色。\n以css為例 a=1 b=a+1 print(\u0026#34;Hello World\u0026#34;,a,b) 詳細支援的程式語言可參考此列表 Markdown語法文章介紹到此結束 ","permalink":"https://tzuyou.github.io/blog/post-2/","tags":null,"title":"Markdown程式語法介紹"},{"categories":["程式設計"],"contents":" 以下資料皆擷取至網路，並在每篇底下附上連結! HTML介紹 (HyperText Markup Language)，超文本標記語言 一種建立網頁的標準標記語言，用來組織架構並呈現網頁內容的程式語言，打造出網頁的基礎並常與CSS與JavaScript一起使用在網頁設計。\n擷取資料參考 HTML教學影片推薦 CSS介紹 能幫助HTML變得更漂亮的程式語言! CSS可以控制網頁的外觀(靜態與動態元素)和手機板的外觀。\n擷取資料參考 CSS教學影片推薦 JAVA介紹 JAVA是物件導向(Object-Oriented)程式語言 Java是由C++簡化來的。由於C++要和C完全相容,又很注重效能問題,因此C++算是很複雜的程式語言。Java在設計之初,考量的重點之一就是簡單,因此和C++比起來,不僅更為物件導向,而且比C++容易學習。\n擷取資料參考 JAVA教學影片推薦 C#介紹 C# 廣泛用運在建構行動應用程式、遊戲和 Windows 應用程式。 C#(C Sharp)由Microsoft開發的一種通用的多範式程式設計語言，在.NET Framework上運行。\n擷取資料參考 C#教學影片推薦 ","permalink":"https://tzuyou.github.io/blog/post-1/","tags":null,"title":"程式語言介紹"}]